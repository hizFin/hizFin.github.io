{"version":3,"sources":["webpack:///./src/pages/tags.jsx"],"names":["TagListWrapper","styled","div","withConfig","displayName","componentId","TagsPage","_ref","data","tags","_sortBy","allMarkdownRemark","group","reverse","posts","nodes","selected","setSelected","useState","filteredPosts","setFilteredPosts","query","document","location","search","useEffect","filter","post","frontmatter","indexOf","q","queryString","parse","React","createElement","Layout","SEO","title","description","url","siteUrl","Title","size","length","TagList","count","tagList","onClick","tag","console","log","navigate","alert","VerticleSpace","PostList","postList"],"mappings":"uSAkBA,MAAMA,EAAiBC,UAAOC,IAAGC,WAAA,CAAAC,YAAA,uBAAAC,YAAA,gBAAVJ,CAAU,+DAyElBK,UAjEEC,IAAe,IAAd,KAAEC,GAAMD,EACxB,MAAME,EAAOC,IAASF,EAAKG,kBAAkBC,MAAO,CAAC,eAAeC,UAC9DC,EAAQN,EAAKG,kBAAkBI,OAE/B,EAACC,EAAS,EAACC,GAAeC,sBAC1B,EAACC,EAAc,EAACC,GAAoBF,mBAAS,IAEnD,IAAIG,EAAQ,KAqBZ,MApBwB,oBAAbC,WACTD,EAAQC,SAASC,SAASC,QAG5BC,oBAAU,KAMRL,EALKJ,EAMHU,IAAOZ,EAAOa,IAAqD,IAA7CA,EAAKC,YAAYnB,KAAKoB,QAAQb,IALnCF,IAOlB,CAACE,IAEJS,oBAAU,KACR,MAAMK,EAAIC,IAAYC,MAAMX,GAAU,EACtCJ,EAAYa,IACX,CAACT,IAGFY,IAAAC,cAACC,IAAM,KACLF,IAAAC,cAACE,IAAG,CAACC,MAAOA,QAAOC,YAAaA,cAAaC,IAAKC,YAElDP,IAAAC,cAAClC,EAAc,KACZgB,EACCiB,IAAAC,cAACO,IAAK,CAACC,KAAK,MAAK,aACJvB,EAAcwB,OAAO,QAC/BxB,EAAcwB,OAAS,GAAK,IAAI,gBAAc3B,EAAS,KAG1DiB,IAAAC,cAACO,IAAK,CAACC,KAAK,MAAK,aACJjC,EAAKkC,OAAO,OAAKlC,EAAKkC,OAAS,GAAK,IAAI,KAIvDV,IAAAC,cAACU,IAAO,CACNC,OAAK,EACLC,QAASrC,EACTO,SAAUA,EACV+B,QAASC,IACPC,QAAQC,IAAIF,EAAKhC,GACbgC,IAAQhC,GACVmC,mBAAS,SACTC,MAAM,OACDnC,EAAY+B,OAKzBf,IAAAC,cAACmB,IAAa,CAACX,KAAM,KAErBT,IAAAC,cAACoB,IAAQ,CAACC,SAAUpC","file":"component---src-pages-tags-jsx-a8bcb7e38c146b3f68f9.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport _ from \"lodash\"\nimport styled from \"styled-components\"\nimport SEO from \"components/SEO\"\nimport filter from \"lodash/filter\"\n\nimport { graphql, navigate } from \"gatsby\"\n\nimport queryString from \"query-string\"\n\nimport Layout from \"components/Layout\"\nimport Title from \"components/Title\"\nimport TagList from \"components/TagList\"\nimport PostList from \"components/PostList\"\nimport VerticleSpace from \"components/VerticalSpace\"\n\nimport { title, description, siteUrl } from \"../../blog-config\"\n\nconst TagListWrapper = styled.div`\n  margin-top: 20px;\n\n  @media (max-width: 768px) {\n    padding: 0 15px;\n  }\n`\n\nconst TagsPage = ({ data }) => {\n  const tags = _.sortBy(data.allMarkdownRemark.group, [\"totalCount\"]).reverse()\n  const posts = data.allMarkdownRemark.nodes\n\n  const [selected, setSelected] = useState()\n  const [filteredPosts, setFilteredPosts] = useState([])\n\n  let query = null\n  if (typeof document !== \"undefined\") {\n    query = document.location.search\n  }\n\n  useEffect(() => {\n    if (!selected) {\n      setFilteredPosts(posts)\n      return\n    }\n\n    setFilteredPosts(\n      filter(posts, post => post.frontmatter.tags.indexOf(selected) !== -1)\n    )\n  }, [selected])\n\n  useEffect(() => {\n    const q = queryString.parse(query)[\"q\"]\n    setSelected(q)\n  }, [query])\n\n  return (\n    <Layout>\n      <SEO title={title} description={description} url={siteUrl} />\n\n      <TagListWrapper>\n        {selected ? (\n          <Title size=\"sm\">\n            There are {filteredPosts.length} post\n            {filteredPosts.length > 1 && \"s\"} that match #{selected}.\n          </Title>\n        ) : (\n          <Title size=\"sm\">\n            There are {tags.length} tag{tags.length > 1 && \"s\"}.\n          </Title>\n        )}\n\n        <TagList\n          count\n          tagList={tags}\n          selected={selected}\n          onClick={tag => {\n            console.log(tag, selected)\n            if (tag === selected) {\n              navigate(\"/tags\")\n              alert(\"zz\")\n            } else setSelected(tag)\n          }}\n        />\n      </TagListWrapper>\n\n      <VerticleSpace size={32} />\n\n      <PostList postList={filteredPosts} />\n    </Layout>\n  )\n}\n\nexport default TagsPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n      nodes {\n        excerpt(pruneLength: 200, truncate: true)\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          update(formatString: \"MMM DD, YYYY\")\n          title\n          tags\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}
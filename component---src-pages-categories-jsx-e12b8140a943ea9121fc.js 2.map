{"version":3,"sources":["webpack:///./src/pages/categories.jsx"],"names":["CategoryListWrapper","styled","div","withConfig","displayName","componentId","CategoryPage","_ref","data","category","_sortBy","allMarkdownRemark","group","reverse","posts","nodes","selected","setSelected","useState","filteredPosts","setFilteredPosts","query","document","location","search","useEffect","filter","post","frontmatter","indexOf","q","queryString","parse","React","createElement","Layout","SEO","title","description","url","siteUrl","Title","size","CategoryList","count","categoryList","onClick","console","log","navigate","alert","Divider","PostList","postList"],"mappings":"qTAmBA,MAAMA,EAAsBC,UAAOC,IAAGC,WAAA,CAAAC,YAAA,kCAAAC,YAAA,gBAAVJ,CAAU,+DAyEvBK,UAjEMC,IAAe,IAAd,KAAEC,GAAMD,EAC5B,MAAME,EAAWC,IAASF,EAAKG,kBAAkBC,MAAO,CAAC,eAAeC,UAClEC,EAAQN,EAAKG,kBAAkBI,OAE/B,EAACC,EAAS,EAACC,GAAeC,sBAC1B,EAACC,EAAc,EAACC,GAAoBF,mBAAS,IAEnD,IAAIG,EAAQ,KAqBZ,MApBwB,oBAAbC,WACTD,EAAQC,SAASC,SAASC,QAG5BC,oBAAU,KAMRL,EALKJ,EAMHU,IAAOZ,EAAOa,IAAyD,IAAjDA,EAAKC,YAAYnB,SAASoB,QAAQb,IALvCF,IAOlB,CAACE,IAEJS,oBAAU,KACR,MAAMK,EAAIC,IAAYC,MAAMX,GAAU,EACtCJ,EAAYa,IACX,CAACT,IAGFY,IAAAC,cAACC,IAAM,KACLF,IAAAC,cAACE,IAAG,CAACC,MAAOA,QAAOC,YAAaA,cAAaC,IAAKC,YAElDP,IAAAC,cAAClC,EAAmB,KAEhBiC,IAAAC,cAACO,IAAK,CAACC,KAAK,OAYdT,IAAAC,cAACS,IAAY,CACXC,OAAK,EACLC,aAAcpC,EACdO,SAAUA,EACV8B,QAASrC,IACPsC,QAAQC,IAAIvC,EAAUO,GAClBP,IAAaO,GACfiC,mBAAS,eACTC,MAAM,OACDjC,EAAYR,OAIzBwB,IAAAC,cAACiB,IAAO,MACRlB,IAAAC,cAACkB,IAAQ,CAACC,SAAUlC","file":"component---src-pages-categories-jsx-e12b8140a943ea9121fc.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport _ from \"lodash\"\nimport styled from \"styled-components\"\nimport SEO from \"components/SEO\"\nimport filter from \"lodash/filter\"\n\nimport { graphql, navigate } from \"gatsby\"\n\nimport queryString from \"query-string\"\n\nimport Layout from \"components/Layout\"\nimport Title from \"components/Title\"\nimport CategoryList from \"components/CategoryList\"\nimport PostList from \"components/PostList\"\nimport VerticleSpace from \"components/VerticalSpace\"\n\nimport { title, description, siteUrl } from \"../../blog-config\"\nimport Divider from \"components/Divider\"\n\nconst CategoryListWrapper = styled.div`\n  margin-top: 20px;\n\n  @media (max-width: 768px) {\n    padding: 0 15px;\n  }\n`\n\nconst CategoryPage = ({ data }) => {\n  const category = _.sortBy(data.allMarkdownRemark.group, [\"totalCount\"]).reverse()\n  const posts = data.allMarkdownRemark.nodes\n\n  const [selected, setSelected] = useState()\n  const [filteredPosts, setFilteredPosts] = useState([])\n\n  let query = null\n  if (typeof document !== \"undefined\") {\n    query = document.location.search\n  }\n\n  useEffect(() => {\n    if (!selected) {\n      setFilteredPosts(posts)\n      return\n    }\n\n    setFilteredPosts(\n      filter(posts, post => post.frontmatter.category.indexOf(selected) !== -1)\n    )\n  }, [selected])\n\n  useEffect(() => {\n    const q = queryString.parse(query)[\"q\"]\n    setSelected(q)\n  }, [query])\n\n  return (\n    <Layout>\n      <SEO title={title} description={description} url={siteUrl} />\n\n      <CategoryListWrapper>\n        {selected ? (\n          <Title size=\"sm\">\n            {/* There are {filteredPosts.length} post\n            {filteredPosts.length > 1 && \"s\"} that match #{selected}. */}\n          </Title>\n        ) : (\n          <Title size=\"sm\">\n            {/* There are {category.length} categor{category.length > 1 && \"ies\"}. */}\n          </Title>\n        )}\n\n\n\n        <CategoryList\n          count\n          categoryList={category}\n          selected={selected}\n          onClick={category => {\n            console.log(category, selected)\n            if (category === selected) {\n              navigate(\"/categories\")\n              alert(\"zz\")\n            } else setSelected(category)\n          }}\n        />\n      </CategoryListWrapper>\n      <Divider />\n      <PostList postList={filteredPosts} />\n    </Layout>\n  )\n}\n\nexport default CategoryPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___category) {\n        fieldValue\n        totalCount\n      }\n      nodes {\n        excerpt(pruneLength: 200, truncate: true)\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY.MM.DD H:mm:ss\")\n          update(formatString: \"YYYYY.MM.DD H:mm:ss\")\n          title\n          tags\n          category\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}